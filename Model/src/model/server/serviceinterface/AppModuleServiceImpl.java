package model.server.serviceinterface;

import java.lang.reflect.Method;

import java.math.BigDecimal;

import java.util.List;

import javax.ejb.Remote;
import javax.ejb.Stateless;

import javax.interceptor.Interceptors;

import model.common.OpportunitiesVOSDO;
import model.common.serviceinterface.AppModuleService;

import oracle.adf.share.logging.ADFLogger;

import oracle.jbo.common.Diagnostic;
import oracle.jbo.common.sdo.SDOHelper;
import oracle.jbo.common.service.types.FindControl;
import oracle.jbo.common.service.types.FindCriteria;
import oracle.jbo.common.service.types.ProcessControl;
import oracle.jbo.common.service.types.ProcessData;
import oracle.jbo.server.svc.ServiceContextInterceptor;
import oracle.jbo.server.svc.ServiceImpl;
import oracle.jbo.service.errors.ServiceException;

import oracle.webservices.annotations.PortableWebService;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Sep 25 14:32:40 IST 2019
// ---------------------------------------------------------------------
@Interceptors({ ServiceContextInterceptor.class })
@Stateless(name = "model.common.AppModuleServiceBean", mappedName = "AppModuleServiceBean")
@Remote(AppModuleService.class)
@PortableWebService(targetNamespace = "/model/common/", serviceName = "AppModuleService",
                    portName = "AppModuleServiceSoapHttpPort",
                    endpointInterface = "model.common.serviceinterface.AppModuleService")
public class AppModuleServiceImpl extends ServiceImpl implements AppModuleService {
    private static boolean _isInited = false;

    /**
     * This is the default constructor (do not remove).
     */
    public AppModuleServiceImpl() {
        init();
        setApplicationModuleDefName("model.AppModule");
        setConfigurationName("AppModuleService");
    }

    /**
     * Generated method. Do not modify. Do initialization in the constructor
     */
    protected void init() {
        if (_isInited) {
            return;
        }
        synchronized (AppModuleServiceImpl.class) {
            if (_isInited) {
                return;
            }
            try {
                SDOHelper.INSTANCE.defineSchema("model/common/serviceinterface/", "AppModuleService.xsd");
                _isInited = true;
            } catch (Throwable t) {
                ADFLogger.createADFLogger(Diagnostic.SERVINT_RT_LOGGER).severe(t);
            }
        }
    }


    /**
     * createOpportunitiesVO1: generated method. Do not modify.
     */
    public OpportunitiesVOSDO createOpportunitiesVO1(OpportunitiesVOSDO opportunitiesVO1) throws ServiceException {
        return (OpportunitiesVOSDO) create(opportunitiesVO1, "OpportunitiesVO1");
    }

    /**
     * updateOpportunitiesVO1: generated method. Do not modify.
     */
    public OpportunitiesVOSDO updateOpportunitiesVO1(OpportunitiesVOSDO opportunitiesVO1) throws ServiceException {
        return (OpportunitiesVOSDO) update(opportunitiesVO1, "OpportunitiesVO1");
    }

    /**
     * deleteOpportunitiesVO1: generated method. Do not modify.
     */
    public void deleteOpportunitiesVO1(OpportunitiesVOSDO opportunitiesVO1) throws ServiceException {
        delete(opportunitiesVO1, "OpportunitiesVO1");
    }

    /**
     * findOpportunitiesVO1: generated method. Do not modify.
     */
    public List<OpportunitiesVOSDO> findOpportunitiesVO1(FindCriteria findCriteria,
                                                         FindControl findControl) throws ServiceException {
        return (List<OpportunitiesVOSDO>) find(findCriteria, findControl, "OpportunitiesVO1", OpportunitiesVOSDO.class);
    }

    /**
     * findOpportunitiesVO1Name: generated method. Do not modify.
     */
    public List<OpportunitiesVOSDO> findOpportunitiesVO1Name(FindCriteria findCriteria, String bindOppName,
                                                             FindControl findControl) throws ServiceException {
        return (List<OpportunitiesVOSDO>) find(findCriteria, findControl, "OpportunitiesVO1", OpportunitiesVOSDO.class,
                                               "Name", new NamedParam[] { new NamedParam("bindOppName", bindOppName) });
    }

    /**
     * getOpportunitiesVO1: generated method. Do not modify.
     */
    public OpportunitiesVOSDO getOpportunitiesVO1(BigDecimal oppId) throws ServiceException {
        return (OpportunitiesVOSDO) get(new Object[] { oppId }, "OpportunitiesVO1", OpportunitiesVOSDO.class);
    }

    /**
     * mergeOpportunitiesVO1: generated method. Do not modify.
     */
    public OpportunitiesVOSDO mergeOpportunitiesVO1(OpportunitiesVOSDO opportunitiesVO1) throws ServiceException {
        return (OpportunitiesVOSDO) merge(opportunitiesVO1, "OpportunitiesVO1");
    }

    /**
     * processOpportunitiesVO1: generated method. Do not modify.
     */
    public List<OpportunitiesVOSDO> processOpportunitiesVO1(String changeOperation,
                                                            List<OpportunitiesVOSDO> opportunitiesVO1,
                                                            ProcessControl processControl) throws ServiceException {
        return (List<OpportunitiesVOSDO>) process(changeOperation, processControl, opportunitiesVO1,
                                                  "OpportunitiesVO1");
    }

    /**
     * processCSOpportunitiesVO1: generated method. Do not modify.
     */
    public ProcessData processCSOpportunitiesVO1(ProcessData processData,
                                                 ProcessControl processControl) throws ServiceException {
        return processChangeSummary(processData, processControl, "OpportunitiesVO1");
    }
}

